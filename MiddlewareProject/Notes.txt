Middleware: A Django middleware is like a plug-in that you can hook into the Django's request/response cycle.
												OR
			Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for globally altering Django’s input or output.



----------------------------------------Building the Django middleware------------------------------------------
A Django middleware can live inside a Python class implementing at least two dunder methods: 
a) init
b) call

In a Django middleware init is called once the server starts, while call is called for every new request to the Django application.

Now middleware.py, init takes get_response, while call returns the same object after taking request as a parameter.

A middleware can have hooks, that is, class methods which intercept Django responses or views during their lifecycle.

process_template_response:- It takes request and response, and has access to the context through response.context_data.

In views file, it uses TemplateResponse, a special helper which is hooked by process_template_response from the middleware. TemplateResponse does not return any data back to the user until it reaches the middleware.

Important Note: Middlewares are run from top to bottom when there is a request to the Django application and from bottom to top when the response leaves the app.


---------------------------------------Consideration for Django middleware----------------------------------------
Let’s consider a situation where you use 3 different kinds of software. For example, you use X for builds, Y for documentation and Z for development purposes. But now you want to integrate all of this into one big system to keep your software updated.

json_script:- Safely outputs a Python object as JSON, wrapped in a <script> tag, ready for use with JavaScript.
If you go ahead and start doing it manually, it may take a long period of time. But somehow you come up with a framework that reads the input/output of your resources and gives an overall correct output for an input.

In other words, the output generated by X can be used by Y and Z.
So basically, Middleware passes data between 2 or more applications.


--------------------------------------------Example of Django middleware------------------------------------------
Examples of operations performed by Middlewares:

HTTP authentication
Session management
Encryption
Validation


------------------------------------------Working ofDjango Middleware------------------------------------------
Django applies the above middleware order in a top-down manner. Each Middleware class is a layer that wraps the view function. When the request passes through all the layers one by one, a response is generated and it again goes through all the layers on its way back out.


--------------------------------------------Writing a custom Middleware---------------------------------------------
In very simple terms, it is much like a view function.
The only thing we need to care about is that there are 2 hooks available for request and 3 for response.

Before calling the view, in the request phase, the available hooks are:
a) process_request()
b) process_view()

After calling the view, in the response phase, the available hooks are:

a) process_exception()
b) process_template_response()
c) process_response()

